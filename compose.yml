services:
  postgres:
    image: postgres:18
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    expose:
      - "5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:8.2.2
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: >
      redis-server
      --appendonly yes
      --save 900 1 --save 300 10 --save 60 10000
      --requirepass ${REDIS_PASSWORD}
      --maxmemory-policy allkeys-lru
    volumes:
      - redisdata:/data
    expose:
      - "6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep PONG" ]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  frontend:
    container_name: bsc-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_NODE_ENV: ${NODE_ENV}
        VITE_APP_ORIGIN: ${APP_ORIGIN}
        VITE_S3_ENDPOINT: ${S3_ENDPOINT}
        VITE_S3_REGION: ${S3_REGION}
        VITE_S3_BUCKET: ${S3_BUCKET}
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - bsc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  backend:
    container_name: bsc-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
        APP_ORIGIN: ${APP_ORIGIN}
        PORT: ${PORT}
        DATABASE_URL: ${DATABASE_URL}
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        REDIS_URL: ${REDIS_URL}
        REDIS_PASSWORD: ${REDIS_PASSWORD}
        AUTH_SECRET: ${AUTH_SECRET}
        OAUTH_DISCORD_CLIENT_ID: ${OAUTH_DISCORD_CLIENT_ID}
        OAUTH_DISCORD_CLIENT_SECRET: ${OAUTH_DISCORD_CLIENT_SECRET}
        OAUTH_GOOGLE_CLIENT_ID: ${OAUTH_GOOGLE_CLIENT_ID}
        OAUTH_GOOGLE_CLIENT_SECRET: ${OAUTH_GOOGLE_CLIENT_SECRET}
        S3_ENDPOINT: ${S3_ENDPOINT}
        S3_REGION: ${S3_REGION}
        S3_BUCKET: ${S3_BUCKET}
        S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
        S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
        FFMPEG_PATH: ${FFMPEG_PATH}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8081:3000"
    networks:
      - bsc-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

volumes:
  pg: {}
  redisdata: {}

networks:
  bsc-network:
    name: bsc-network
    driver: bridge